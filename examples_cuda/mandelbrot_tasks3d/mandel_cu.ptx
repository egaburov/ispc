//
// Generated by NVIDIA NVVM Compiler
// Compiler built on Tue Nov  5 04:09:19 2013 (1383620959)
// Cuda compilation tools, release 6.0, V6.0.1
//

.version 4.0
.target sm_35
.address_size 64

.extern .func  (.param .b32 func_retval0) cudaLaunchDevice
(
	.param .b64 cudaLaunchDevice_param_0,
	.param .b64 cudaLaunchDevice_param_1,
	.param .align 4 .b8 cudaLaunchDevice_param_2[12],
	.param .align 4 .b8 cudaLaunchDevice_param_3[12],
	.param .b32 cudaLaunchDevice_param_4,
	.param .b64 cudaLaunchDevice_param_5
)
;
.extern .func  (.param .b64 func_retval0) cudaGetParameterBuffer
(
	.param .b64 cudaGetParameterBuffer_param_0,
	.param .b64 cudaGetParameterBuffer_param_1
)
;
.const .align 64 .b8 VectorConstant0[128] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0};
.const .align 64 .b8 VectorConstant1[128] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0};
.const .align 64 .b8 VectorConstant2[128] = {0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 9, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 19, 0, 0, 0, 20, 0, 0, 0, 21, 0, 0, 0, 22, 0, 0, 0, 23, 0, 0, 0, 24, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 31, 0, 0, 0};

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

.visible .func _ZN5vec32IiEC2Ev(
	.param .b64 _ZN5vec32IiEC2Ev_param_0
)
{



	ret;
}

.visible .entry mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E_(
	.param .f32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_0,
	.param .f32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_1,
	.param .f32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_2,
	.param .f32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_3,
	.param .u32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_4,
	.param .u32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_5,
	.param .u32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_6,
	.param .u32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_7,
	.param .u32 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_8,
	.param .u64 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_9,
	.param .align 1 .b8 mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_10[1]
)
{
	.reg .pred 	%p<58>;
	.reg .s16 	%rs<62>;
	.reg .s32 	%r<142>;
	.reg .f32 	%f<75>;
	.reg .s64 	%rd<27>;


	ld.param.f32 	%f42, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_0];
	ld.param.f32 	%f43, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_1];
	ld.param.f32 	%f44, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_2];
	ld.param.f32 	%f45, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_3];
	ld.param.u32 	%r36, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_4];
	ld.param.u32 	%r38, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_5];
	ld.param.u32 	%r39, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_6];
	ld.param.u32 	%r40, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_7];
	ld.param.u32 	%r37, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_8];
	ld.param.u64 	%rd8, [mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E__param_9];
	cvta.to.global.u64 	%rd1, %rd8;
	mov.u32 	%r41, %ctaid.x;
	shl.b32 	%r42, %r41, 2;
	mov.u32 	%r43, %tid.x;
	shr.u32 	%r44, %r43, 5;
	add.s32 	%r45, %r44, %r42;
	mul.lo.s32 	%r1, %r45, %r39;
	add.s32 	%r46, %r1, %r39;
	min.s32 	%r2, %r46, %r36;
	mov.u32 	%r47, %ctaid.y;
	mul.lo.s32 	%r134, %r47, %r40;
	add.s32 	%r48, %r134, %r40;
	min.s32 	%r4, %r48, %r38;
	sub.s32 	%r49, %r2, %r1;
	shr.s32 	%r50, %r49, 31;
	shr.u32 	%r51, %r50, 27;
	add.s32 	%r52, %r49, %r51;
	and.b32  	%r53, %r52, -32;
	sub.s32 	%r54, %r49, %r53;
	sub.s32 	%r5, %r2, %r54;
	setp.ge.s32	%p4, %r134, %r4;
	mov.u32 	%r136, %r134;
	@%p4 bra 	BB3_32;

	setp.gt.s32	%p5, %r37, 0;
	setp.lt.s32	%p6, %r1, %r5;
	selp.u16	%rs1, 1, 0, %p5;
	@%p6 bra 	BB3_13;

	cvt.s64.s32	%rd26, %r134;
	// inline asm
	mov.u32 %r55, %laneid;
	// inline asm
	mov.u32 	%r135, %r134;

BB3_3:
	setp.ge.s32	%p7, %r1, %r2;
	@%p7 bra 	BB3_12;

	cvt.s64.s32	%rd4, %r55;
	mul.wide.s32 	%rd9, %r55, 4;
	mov.u64 	%rd10, VectorConstant2;
	add.s64 	%rd11, %rd10, %rd9;
	ld.const.u32 	%r58, [%rd11];
	add.s32 	%r8, %r58, %r1;
	setp.lt.s32	%p9, %r8, %r2;
	cvt.rn.f32.s32	%f46, %r8;
	fma.rn.f32 	%f1, %f46, %f43, %f42;
	cvt.rn.f32.s32	%f47, %r135;
	fma.rn.f32 	%f3, %f47, %f45, %f44;
	and.pred  	%p10, %p5, %p9;
	selp.u32	%r57, 1, 0, %p10;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r57, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r56, 1, 0, %p2; 
	}
	// inline asm
	selp.u16	%rs46, 1, 0, %p10;
	setp.ne.s32	%p11, %r56, 0;
	mov.f32 	%f64, %f3;
	mov.f32 	%f62, %f1;
	@%p11 bra 	BB3_6;

	mov.u32 	%r132, 0;
	bra.uni 	BB3_10;

BB3_6:
	mov.u32 	%r131, 0;
	mov.u16 	%rs28, 0;
	mov.u16 	%rs49, %rs28;
	mov.u16 	%rs57, %rs1;

BB3_7:
	mov.u16 	%rs4, %rs57;
	mov.u16 	%rs3, %rs49;
	mov.u16 	%rs5, %rs46;
	mov.f32 	%f60, %f62;
	mov.f32 	%f5, %f60;
	mul.f32 	%f8, %f5, %f5;
	mul.f32 	%f10, %f64, %f64;
	add.f32 	%f48, %f8, %f10;
	setp.gt.f32	%p12, %f48, 0f40800000;
	selp.u32	%r64, 1, 0, %p12;
	cvt.u32.u16	%r65, %rs4;
	cvt.s32.s8 	%r10, %r65;
	and.b32  	%r66, %r64, %r10;
	setp.ne.s32	%p13, %r66, 0;
	selp.u16	%rs30, 1, 0, %p13;
	or.b16  	%rs6, %rs30, %rs3;
	and.b16  	%rs31, %rs6, 255;
	setp.ne.s16	%p1, %rs31, 0;
	and.pred  	%p15, %p9, %p1;
	selp.u32	%r61, 1, 0, %p15;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r61, 0; 
	vote.ballot.b32 	%r60, %p1; 
	}
	// inline asm
	cvt.u32.u16	%r67, %rs5;
	cvt.s32.s8 	%r63, %r67;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r63, 0; 
	vote.ballot.b32 	%r62, %p1; 
	}
	// inline asm
	setp.eq.s32	%p16, %r60, %r62;
	mov.f32 	%f63, %f5;
	mov.u16 	%rs48, %rs28;
	@%p16 bra 	BB3_9;

	selp.u32	%r68, 1, 0, %p1;
	not.b32 	%r69, %r68;
	and.b32  	%r70, %r10, %r69;
	setp.ne.s32	%p18, %r70, 0;
	sub.f32 	%f49, %f8, %f10;
	add.f32 	%f11, %f1, %f49;
	add.f32 	%f50, %f5, %f5;
	fma.rn.f32 	%f64, %f50, %f64, %f3;
	selp.u16	%rs7, 1, 0, %p18;
	mov.f32 	%f63, %f11;
	mov.u16 	%rs48, %rs7;

BB3_9:
	mov.u16 	%rs8, %rs48;
	mov.f32 	%f62, %f63;
	and.b16  	%rs33, %rs8, 255;
	setp.ne.s16	%p19, %rs33, 0;
	selp.u32	%r73, 1, 0, %p19;
	add.s32 	%r131, %r73, %r131;
	setp.lt.s32	%p20, %r131, %r37;
	selp.u32	%r74, 1, 0, %p20;
	cvt.u32.u16	%r75, %rs8;
	cvt.s32.s8 	%r76, %r75;
	and.b32  	%r77, %r74, %r76;
	setp.ne.s32	%p21, %r77, 0;
	and.pred  	%p23, %p9, %p21;
	selp.u32	%r72, 1, 0, %p23;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r72, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r71, 1, 0, %p2; 
	}
	// inline asm
	selp.u16	%rs46, 1, 0, %p23;
	setp.ne.s32	%p24, %r71, 0;
	selp.u16	%rs57, 1, 0, %p21;
	selp.u16	%rs49, 1, 0, %p1;
	mov.u32 	%r132, %r131;
	@%p24 bra 	BB3_7;

BB3_10:
	setp.ge.s32	%p25, %r8, %r2;
	@%p25 bra 	BB3_12;

	cvt.u32.u64	%r79, %rd26;
	mad.lo.s32 	%r80, %r79, %r36, %r1;
	shl.b32 	%r81, %r80, 2;
	cvt.s64.s32	%rd12, %r81;
	add.s64 	%rd13, %rd1, %rd12;
	shl.b64 	%rd14, %rd4, 2;
	add.s64 	%rd15, %rd13, %rd14;
	st.global.u32 	[%rd15], %r132;

BB3_12:
	add.s64 	%rd26, %rd26, 1;
	cvt.u32.u64	%r135, %rd26;
	setp.lt.s32	%p26, %r135, %r4;
	@%p26 bra 	BB3_3;
	bra.uni 	BB3_32;

BB3_13:
	selp.u32	%r15, 1, 0, %p5;
	// inline asm
	mov.u32 %r82, %laneid;
	// inline asm

BB3_14:
	mov.u32 	%r16, %r134;
	cvt.rn.f32.s32	%f51, %r16;
	fma.rn.f32 	%f15, %f51, %f45, %f44;
	mul.lo.s32 	%r18, %r136, %r36;
	mov.u32 	%r137, %r1;

BB3_15:
	mov.u32 	%r19, %r137;
	cvt.s64.s32	%rd6, %r82;
	mul.wide.s32 	%rd16, %r82, 4;
	mov.u64 	%rd17, VectorConstant2;
	add.s64 	%rd7, %rd17, %rd16;
	ld.const.u32 	%r85, [%rd7];
	add.s32 	%r86, %r85, %r19;
	cvt.rn.f32.s32	%f52, %r86;
	fma.rn.f32 	%f16, %f52, %f43, %f42;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r15, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r83, 1, 0, %p2; 
	}
	// inline asm
	setp.ne.s32	%p28, %r83, 0;
	@%p28 bra 	BB3_17;

	mov.u32 	%r139, 0;
	bra.uni 	BB3_21;

BB3_17:
	mov.u32 	%r138, 0;
	mov.u16 	%rs34, 0;
	mov.f32 	%f69, %f15;
	mov.f32 	%f67, %f16;
	mov.u16 	%rs52, %rs34;
	mov.u16 	%rs56, %rs1;

BB3_18:
	mov.u16 	%rs13, %rs56;
	mov.u16 	%rs12, %rs52;
	mov.f32 	%f65, %f67;
	mov.f32 	%f19, %f65;
	mul.f32 	%f22, %f19, %f19;
	mul.f32 	%f24, %f69, %f69;
	add.f32 	%f53, %f22, %f24;
	setp.gt.f32	%p29, %f53, 0f40800000;
	selp.u32	%r92, 1, 0, %p29;
	cvt.u32.u16	%r93, %rs13;
	cvt.s32.s8 	%r21, %r93;
	and.b32  	%r94, %r92, %r21;
	setp.ne.s32	%p30, %r94, 0;
	selp.u16	%rs36, 1, 0, %p30;
	or.b16  	%rs37, %rs36, %rs12;
	and.b16  	%rs38, %rs37, 255;
	setp.ne.s16	%p2, %rs38, 0;
	selp.u32	%r89, 1, 0, %p2;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r89, 0; 
	vote.ballot.b32 	%r88, %p1; 
	}
	// inline asm
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r21, 0; 
	vote.ballot.b32 	%r90, %p1; 
	}
	// inline asm
	setp.eq.s32	%p31, %r88, %r90;
	mov.f32 	%f68, %f19;
	mov.u16 	%rs51, %rs34;
	@%p31 bra 	BB3_20;

	not.b32 	%r95, %r89;
	and.b32  	%r96, %r21, %r95;
	setp.ne.s32	%p32, %r96, 0;
	sub.f32 	%f54, %f22, %f24;
	add.f32 	%f25, %f16, %f54;
	add.f32 	%f55, %f19, %f19;
	fma.rn.f32 	%f69, %f55, %f69, %f15;
	selp.u16	%rs14, 1, 0, %p32;
	mov.f32 	%f68, %f25;
	mov.u16 	%rs51, %rs14;

BB3_20:
	mov.u16 	%rs15, %rs51;
	mov.f32 	%f67, %f68;
	and.b16  	%rs39, %rs15, 255;
	setp.ne.s16	%p33, %rs39, 0;
	selp.u32	%r99, 1, 0, %p33;
	add.s32 	%r138, %r99, %r138;
	setp.lt.s32	%p34, %r138, %r37;
	selp.u32	%r100, 1, 0, %p34;
	cvt.u32.u16	%r101, %rs15;
	cvt.s32.s8 	%r102, %r101;
	and.b32  	%r103, %r100, %r102;
	setp.ne.s32	%p35, %r103, 0;
	selp.u32	%r98, 1, 0, %p35;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r98, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r97, 1, 0, %p2; 
	}
	// inline asm
	selp.u16	%rs56, 1, 0, %p35;
	setp.ne.s32	%p36, %r97, 0;
	selp.u16	%rs52, 1, 0, %p2;
	mov.u32 	%r139, %r138;
	@%p36 bra 	BB3_18;

BB3_21:
	add.s32 	%r105, %r19, %r18;
	shl.b32 	%r106, %r105, 2;
	cvt.s64.s32	%rd18, %r106;
	add.s64 	%rd19, %rd1, %rd18;
	shl.b64 	%rd20, %rd6, 2;
	add.s64 	%rd21, %rd19, %rd20;
	st.global.u32 	[%rd21], %r139;
	add.s32 	%r26, %r19, 32;
	setp.lt.s32	%p37, %r26, %r5;
	mov.u32 	%r137, %r26;
	@%p37 bra 	BB3_15;

	setp.ge.s32	%p38, %r26, %r2;
	@%p38 bra 	BB3_31;

	ld.const.u32 	%r109, [%rd7];
	add.s32 	%r27, %r109, %r26;
	setp.lt.s32	%p40, %r27, %r2;
	cvt.rn.f32.s32	%f56, %r27;
	fma.rn.f32 	%f29, %f56, %f43, %f42;
	and.pred  	%p41, %p5, %p40;
	selp.u32	%r108, 1, 0, %p41;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r108, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r107, 1, 0, %p2; 
	}
	// inline asm
	selp.u16	%rs58, 1, 0, %p41;
	setp.ne.s32	%p42, %r107, 0;
	mov.f32 	%f74, %f15;
	mov.f32 	%f72, %f29;
	@%p42 bra 	BB3_25;

	mov.u32 	%r141, 0;
	bra.uni 	BB3_29;

BB3_25:
	mov.u32 	%r140, 0;
	mov.u16 	%rs40, 0;
	mov.u16 	%rs55, %rs1;
	mov.u16 	%rs61, %rs40;

BB3_26:
	mov.u16 	%rs19, %rs61;
	mov.u16 	%rs21, %rs58;
	mov.u16 	%rs20, %rs55;
	mov.f32 	%f70, %f72;
	mov.f32 	%f32, %f70;
	mul.f32 	%f35, %f32, %f32;
	mul.f32 	%f37, %f74, %f74;
	add.f32 	%f57, %f35, %f37;
	setp.gt.f32	%p43, %f57, 0f40800000;
	selp.u32	%r115, 1, 0, %p43;
	cvt.u32.u16	%r116, %rs20;
	cvt.s32.s8 	%r29, %r116;
	and.b32  	%r117, %r115, %r29;
	setp.ne.s32	%p44, %r117, 0;
	selp.u16	%rs42, 1, 0, %p44;
	or.b16  	%rs22, %rs42, %rs19;
	and.b16  	%rs43, %rs22, 255;
	setp.ne.s16	%p3, %rs43, 0;
	and.pred  	%p46, %p40, %p3;
	selp.u32	%r112, 1, 0, %p46;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r112, 0; 
	vote.ballot.b32 	%r111, %p1; 
	}
	// inline asm
	cvt.u32.u16	%r118, %rs21;
	cvt.s32.s8 	%r114, %r118;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	setp.ne.u32 	%p1, %r114, 0; 
	vote.ballot.b32 	%r113, %p1; 
	}
	// inline asm
	setp.eq.s32	%p47, %r111, %r113;
	mov.f32 	%f73, %f32;
	mov.u16 	%rs60, %rs40;
	@%p47 bra 	BB3_28;

	selp.u32	%r119, 1, 0, %p3;
	not.b32 	%r120, %r119;
	and.b32  	%r121, %r29, %r120;
	setp.ne.s32	%p49, %r121, 0;
	sub.f32 	%f58, %f35, %f37;
	add.f32 	%f38, %f29, %f58;
	add.f32 	%f59, %f32, %f32;
	fma.rn.f32 	%f74, %f59, %f74, %f15;
	selp.u16	%rs23, 1, 0, %p49;
	mov.f32 	%f73, %f38;
	mov.u16 	%rs60, %rs23;

BB3_28:
	mov.u16 	%rs24, %rs60;
	mov.f32 	%f72, %f73;
	and.b16  	%rs45, %rs24, 255;
	setp.ne.s16	%p50, %rs45, 0;
	selp.u32	%r124, 1, 0, %p50;
	add.s32 	%r140, %r124, %r140;
	setp.lt.s32	%p51, %r140, %r37;
	selp.u32	%r125, 1, 0, %p51;
	cvt.u32.u16	%r126, %rs24;
	cvt.s32.s8 	%r127, %r126;
	and.b32  	%r128, %r125, %r127;
	setp.ne.s32	%p52, %r128, 0;
	and.pred  	%p54, %p40, %p52;
	selp.u32	%r123, 1, 0, %p54;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r123, 0; 
	vote.any.pred 	%p2, %p1; 
	selp.s32 	%r122, 1, 0, %p2; 
	}
	// inline asm
	selp.u16	%rs58, 1, 0, %p54;
	setp.ne.s32	%p55, %r122, 0;
	selp.u16	%rs26, 1, 0, %p52;
	selp.u16	%rs61, 1, 0, %p3;
	mov.u32 	%r141, %r140;
	mov.u16 	%rs55, %rs26;
	@%p55 bra 	BB3_26;

BB3_29:
	add.s32 	%r33, %r26, %r18;
	setp.ge.s32	%p56, %r27, %r2;
	@%p56 bra 	BB3_31;

	shl.b32 	%r130, %r33, 2;
	cvt.s64.s32	%rd22, %r130;
	add.s64 	%rd23, %rd1, %rd22;
	add.s64 	%rd25, %rd23, %rd20;
	st.global.u32 	[%rd25], %r141;

BB3_31:
	add.s32 	%r134, %r136, 1;
	setp.ne.s32	%p57, %r134, %r4;
	mov.u32 	%r136, %r134;
	@%p57 bra 	BB3_14;

BB3_32:
	ret;
}

.visible .func _ZN5vec32IfEC2Ev(
	.param .b64 _ZN5vec32IfEC2Ev_param_0
)
{



	ret;
}

.visible .func _ZN5vec32IbEC2Ev(
	.param .b64 _ZN5vec32IbEC2Ev_param_0
)
{



	ret;
}

.visible .func _ZN5vec32IbEC2Eb(
	.param .b64 _ZN5vec32IbEC2Eb_param_0,
	.param .b32 _ZN5vec32IbEC2Eb_param_1
)
{
	.reg .s16 	%rs<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN5vec32IbEC2Eb_param_0];
	ld.param.s8 	%rs1, [_ZN5vec32IbEC2Eb_param_1];
	st.u8 	[%rd1], %rs1;
	ret;
}

.visible .entry mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_(
	.param .f32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_0,
	.param .f32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_1,
	.param .f32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_2,
	.param .f32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_3,
	.param .u32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_4,
	.param .u32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_5,
	.param .u32 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_6,
	.param .u64 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_7,
	.param .align 1 .b8 mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_8[1]
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<22>;
	.reg .f32 	%f<11>;
	.reg .s64 	%rd<10>;


	ld.param.f32 	%f1, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_0];
	ld.param.f32 	%f2, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_1];
	ld.param.f32 	%f3, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_2];
	ld.param.f32 	%f4, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_3];
	ld.param.u32 	%r2, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_4];
	ld.param.u32 	%r3, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_5];
	ld.param.u32 	%r4, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_6];
	ld.param.u64 	%rd3, [mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E__param_7];
	// inline asm
	mov.u32 %r5, %laneid;
	// inline asm
	setp.ne.s32	%p1, %r5, 0;
	mov.u64 	%rd9, 0;
	@%p1 bra 	BB7_2;

	mov.u64 	%rd5, 8;
	mov.u64 	%rd6, 48;
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd6;
	.param .b64 retval0;
	call.uni (retval0), 
	cudaGetParameterBuffer, 
	(
	param0, 
	param1
	);
	ld.param.b64	%rd9, [retval0+0];
	}
	// Callseq End 0

BB7_2:
	setp.eq.s64	%p2, %rd9, 0;
	@%p2 bra 	BB7_4;

	st.f32 	[%rd9], %f1;
	cvt.rn.f32.s32	%f5, %r2;
	sub.f32 	%f6, %f3, %f1;
	div.rn.f32 	%f7, %f6, %f5;
	st.f32 	[%rd9+4], %f7;
	st.f32 	[%rd9+8], %f2;
	cvt.rn.f32.s32	%f8, %r3;
	sub.f32 	%f9, %f4, %f2;
	div.rn.f32 	%f10, %f9, %f8;
	st.f32 	[%rd9+12], %f10;
	st.u32 	[%rd9+16], %r2;
	st.u32 	[%rd9+20], %r3;
	mov.u32 	%r6, 64;
	st.u32 	[%rd9+24], %r6;
	mov.u32 	%r7, 8;
	st.u32 	[%rd9+28], %r7;
	st.u32 	[%rd9+32], %r4;
	st.u64 	[%rd9+40], %rd3;

BB7_4:
	@%p1 bra 	BB7_6;

	shr.s32 	%r8, %r2, 31;
	shr.u32 	%r9, %r8, 26;
	add.s32 	%r10, %r2, %r9;
	shr.s32 	%r11, %r10, 6;
	shr.s32 	%r12, %r3, 31;
	shr.u32 	%r13, %r12, 29;
	add.s32 	%r14, %r3, %r13;
	shr.s32 	%r15, %r14, 3;
	add.s32 	%r16, %r11, 3;
	shr.u32 	%r17, %r16, 2;
	mov.u32 	%r18, 1;
	mov.u32 	%r19, 128;
	mov.u32 	%r20, 0;
	mov.u64 	%rd7, 0;
	mov.u64 	%rd8, mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E_;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64	[param0+0], %rd8;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd9;
	.param .align 4 .b8 param2[12];
	st.param.b32	[param2+0], %r17;
	st.param.b32	[param2+4], %r15;
	st.param.b32	[param2+8], %r18;
	.param .align 4 .b8 param3[12];
	st.param.b32	[param3+0], %r19;
	st.param.b32	[param3+4], %r18;
	st.param.b32	[param3+8], %r18;
	.param .b32 param4;
	st.param.b32	[param4+0], %r20;
	.param .b64 param5;
	st.param.b64	[param5+0], %rd7;
	.param .b32 retval0;
	call.uni (retval0), 
	cudaLaunchDevice, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4, 
	param5
	);
	ld.param.b32	%r21, [retval0+0];
	}
	// Callseq End 1

BB7_6:
	ret;
}

.visible .func _ZN10__vec32_i1C2Eb(
	.param .b64 _ZN10__vec32_i1C2Eb_param_0,
	.param .b32 _ZN10__vec32_i1C2Eb_param_1
)
{
	.reg .s16 	%rs<2>;
	.reg .s64 	%rd<2>;


	ld.param.u64 	%rd1, [_ZN10__vec32_i1C2Eb_param_0];
	ld.param.s8 	%rs1, [_ZN10__vec32_i1C2Eb_param_1];
	st.u8 	[%rd1], %rs1;
	ret;
}


