/*******************************************************************
  This file has been automatically generated by ispc
  DO NOT EDIT THIS FILE DIRECTLY
 *******************************************************************/

/* Provide Declarations */
#include <stdarg.h>
#include <setjmp.h>
#include <limits.h>
#include <stdlib.h>
#ifdef _MSC_VER
  #define NOMINMAX
  #include <windows.h>
#endif // _MSC_VER
#include <stdlib.h>
#include <stdint.h>
/* get a declaration for alloca */
#ifdef _MSC_VER
  #include <malloc.h>
  #define alloca _alloca
#else
  #include <alloca.h>
#endif

#undef ISPC_FAST_MATH
#include "cuda-i1x32.h"

/* Basic Library Function Declarations */
#if 0
extern "C" {
int puts(unsigned char *);
unsigned int putchar(unsigned int);
int fflush(void *);
int printf(const unsigned char *, ...);
uint8_t *memcpy(uint8_t *, uint8_t *, uint64_t );
uint8_t *memset(uint8_t *, uint8_t, uint64_t );
void memset_pattern16(void *, const void *, uint64_t );
}
#endif

#ifndef __GNUC__  /* Can only support "linkonce" vars with GCC */
#define __attribute__(X)
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __EXTERNAL_WEAK__ __attribute__((weak_import))
#elif defined(__GNUC__)
#define __EXTERNAL_WEAK__ __attribute__((weak))
#else
#define __EXTERNAL_WEAK__
#endif

#if defined(__GNUC__) && defined(__APPLE_CC__)
#define __ATTRIBUTE_WEAK__
#elif defined(__GNUC__)
#define __ATTRIBUTE_WEAK__ __attribute__((weak))
#else
#define __ATTRIBUTE_WEAK__
#endif

#if defined(__GNUC__)
#define __HIDDEN__ __attribute__((visibility("hidden")))
#endif

#if (defined(__GNUC__) || defined(__clang__)) && !defined(__INTEL_COMPILER)
#define LLVM_NAN(NanStr)   __builtin_nan(NanStr)   /* Double */
#define LLVM_NANF(NanStr)  __builtin_nanf(NanStr)  /* Float */
#define LLVM_NANS(NanStr)  __builtin_nans(NanStr)  /* Double */
#define LLVM_NANSF(NanStr) __builtin_nansf(NanStr) /* Float */
#define LLVM_INF           __builtin_inf()         /* Double */
#define LLVM_INFF          __builtin_inff()        /* Float */
//#define LLVM_PREFETCH(addr,rw,locality) __builtin_prefetch(addr,rw,locality)
//#define __ATTRIBUTE_CTOR__ __attribute__((constructor))
//#define __ATTRIBUTE_DTOR__ __attribute__((destructor))
#elif defined(_MSC_VER) || defined(__INTEL_COMPILER)
#include <limits>
#define LLVM_NAN(NanStr)   std::numeric_limits<double>::quiet_NaN()
#define LLVM_NANF(NanStr)  std::numeric_limits<float>::quiet_NaN()
#define LLVM_NANS(NanStr)  std::numeric_limits<double>::signaling_NaN()
#define LLVM_NANSF(NanStr) std::numeric_limits<float>::signaling_NaN()
#define LLVM_INF           std::numeric_limits<double>::infinity()
#define LLVM_INFF          std::numeric_limits<float>::infinity()
//#define LLVM_PREFETCH(addr,rw,locality)            /* PREFETCH */
//#define __ATTRIBUTE_CTOR__
//#define __ATTRIBUTE_DTOR__
#else
#error "Not MSVC, clang, or g++?"
#endif

#if (defined(__GNUC__) || defined(__clang__))
#define LLVM_ASM(X) __asm(X)
#endif

#if defined(__clang__) || defined(__INTEL_COMPILER) || (__GNUC__ < 4) /* Old GCCs, or compilers not GCC */ 
#define __builtin_stack_save() 0   /* not implemented */
#define __builtin_stack_restore(X) /* noop */
#endif

#define CODE_FOR_MAIN() /* Any target-specific code for main()*/

#ifndef __cplusplus
typedef unsigned char bool;
#endif


/* Support for floating point constants */
typedef uint64_t ConstantDoubleTy;
typedef uint32_t ConstantFloatTy;
typedef struct { unsigned long long f1; unsigned short f2; unsigned short pad[3]; } ConstantFP80Ty;
typedef struct { uint64_t f1, f2; } ConstantFP128Ty;


/* Global Declarations */


/* Helper union for bitcasts */
typedef union {
  unsigned int Int32;
  unsigned long long Int64;
  float Float;
  double Double;
} llvmBitCastUnion;

/* Function Declarations */
extern "C" {
__device__ uint8_t *ISPCAlloc(uint8_t **, uint64_t , uint64_t );
__device__ void ISPCLaunch(uint8_t **, uint8_t *, uint8_t *, uint32_t , uint32_t , uint32_t );
__device__ void ISPCSync(uint8_t *);
__global__ void mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E_(float x0_, float dx_, float y0_, float dy_, uint32_t width_, uint32_t height_, uint32_t xspan_, uint32_t yspan_, uint32_t maxIterations_, uint32_t *output_, __vec32_i1 __mask_);
__global__ void mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_, __vec32_i1 __mask_);
void mandelbrot_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_);
}



/* Function Bodies */
template <typename A, typename B> static inline int llvm_fcmp_ord(A X, B Y) { return X == X && Y == Y; }
template <typename A, typename B> static inline int llvm_fcmp_uno(A X, B Y) { return X != X || Y != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ueq(A X, B Y) { return X == Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_une(A X, B Y) { return X != Y; }
template <typename A, typename B> static inline int llvm_fcmp_ult(A X, B Y) { return X <  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ugt(A X, B Y) { return X >  Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_ule(A X, B Y) { return X <= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_uge(A X, B Y) { return X >= Y || llvm_fcmp_uno(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_oeq(A X, B Y) { return X == Y ; }
template <typename A, typename B> static inline int llvm_fcmp_one(A X, B Y) { return X != Y && llvm_fcmp_ord(X, Y); }
template <typename A, typename B> static inline int llvm_fcmp_olt(A X, B Y) { return X <  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ogt(A X, B Y) { return X >  Y ; }
template <typename A, typename B> static inline int llvm_fcmp_ole(A X, B Y) { return X <= Y ; }
template <typename A, typename B> static inline int llvm_fcmp_oge(A X, B Y) { return X >= Y ; }
template <typename A> A *Memset(A *ptr, int count, size_t len) { return (A *)memset(ptr, count, len); }

static __device__ __constant__ int32_t __attribute__ ((aligned(64))) VectorConstant0[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u, 16u, 17u, 18u, 19u, 20u, 21u, 22u, 23u, 24u, 25u, 26u, 27u, 28u, 29u, 30u, 31u,  };
static __device__ __constant__ int32_t __attribute__ ((aligned(64))) VectorConstant1[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u, 16u, 17u, 18u, 19u, 20u, 21u, 22u, 23u, 24u, 25u, 26u, 27u, 28u, 29u, 30u, 31u,  };
static __device__ __constant__ int32_t __attribute__ ((aligned(64))) VectorConstant2[] = { 0u, 1u, 2u, 3u, 4u, 5u, 6u, 7u, 8u, 9u, 10u, 11u, 12u, 13u, 14u, 15u, 16u, 17u, 18u, 19u, 20u, 21u, 22u, 23u, 24u, 25u, 26u, 27u, 28u, 29u, 30u, 31u,  };

__global__ void mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E_(float x0_, float dx_, float y0_, float dy_, uint32_t width_, uint32_t height_, uint32_t xspan_, uint32_t yspan_, uint32_t maxIterations_, uint32_t *output_, __vec32_i1 __mask_) {
  uint32_t calltmp_2e_i_;
  uint32_t mul_calltmp_xspan_load_;
  uint32_t calltmp_2e_i131_;
  uint32_t calltmp_2e_i132_;
  uint32_t mul_calltmp19_yspan_load_;
  uint32_t calltmp_2e_i133_;
  uint32_t aligned_end35_;
  __vec32_i32 mul_calltmp19_yspan_load_smear_;
  __vec32_i32 calltmp_2e_i131_smear_;
  __vec32_f x0_smear_;
  __vec32_f dx_smear_;
  __vec32_f y0_smear_;
  __vec32_f dy_smear_;
  __vec32_i32 maxIterations_smear_;
  __vec32_i1 less_i_load_count_load_2e_i140190_;
  uint8_t *output_load110_ptr2int_2void_;
  uint64_t tmp__1_;
  __vec32_i32 new_counter77_2e_us_smear_;
  __vec32_i32 iter_val82_2e_us_;
  __vec32_i1 cmp85_2e_us_;
  __vec32_f add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_2e_us_;
  __vec32_f add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_2e_us_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i192_2e_us_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i142193_2e_us_;
  __vec32_i32 v1_2e_i176177_2e_lcssa_2e_us_;
  __vec32_i32 v1_2e_i176177_2e_lcssa_2e_us___PHI;
  uint32_t new_counter_2e_us_;
  __vec32_i32 new_counter_2e_us_smear_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i199_2e_us_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i199_2e_us___PHI;
  __vec32_i1 oldMask_26_test_2e_i141198_2e_us_;
  __vec32_i1 oldMask_26_test_2e_i141198_2e_us___PHI;
  __vec32_i1 break_lanes_memory_2e_0_2e_i137197_2e_us_;
  __vec32_i1 break_lanes_memory_2e_0_2e_i137197_2e_us___PHI;
  __vec32_f z_im_2e_0_2e_i136196_2e_us_;
  __vec32_f z_im_2e_0_2e_i136196_2e_us___PHI;
  __vec32_f z_re_2e_0_2e_i135195_2e_us_;
  __vec32_f z_re_2e_0_2e_i135195_2e_us___PHI;
  __vec32_i32 v1_2e_i176177194_2e_us_;
  __vec32_i32 v1_2e_i176177194_2e_us___PHI;
  __vec32_f mul_z_re_load_z_re_load13_2e_i150_2e_us_;
  __vec32_f mul_z_im_load_z_im_load14_2e_i151_2e_us_;
  __vec32_i1 oldMask_26_test16_2e_i154_2e_us_and_mask_;
  __vec32_i1 mask_7c_break_mask_2e_i155_2e_us_;
  __vec32_i1 finished_26_func_2e_i_2e_us_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i157_2e_us_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i158_2e_us_;
  __vec32_i1 new_mask28_2e_i165_2e_us208_;
  __vec32_f add_c_re_load42_new_re_load_2e_i171_2e_us_;
  __vec32_f add_c_im_load44_new_im_load_2e_i172_2e_us_;
  __vec32_f z_re_2e_1_2e_i144_2e_us_;
  __vec32_f z_re_2e_1_2e_i144_2e_us___PHI;
  __vec32_f z_im_2e_1_2e_i145_2e_us_;
  __vec32_f z_im_2e_1_2e_i145_2e_us___PHI;
  __vec32_i1 internal_mask_memory_2e_1_2e_i146_2e_us_;
  __vec32_i1 internal_mask_memory_2e_1_2e_i146_2e_us___PHI;
  __vec32_i32 v1_2e_i176_2e_us_;
  __vec32_i1 oldMask_26_test_2e_i141_2e_us_and_mask_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i_2e_us_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i142_2e_us_;
  uint32_t counter36_2e_3188_2e_us_;
  uint32_t counter36_2e_3188_2e_us___PHI;
  __vec32_i32 counter36_2e_3188_2e_us_smear_;
  __vec32_f add_x0_load_broadcast_mul_xi_load62_to_float_dx_load_broadcast_2e_us_;
  bool internal_mask_26_function_mask10_any_2e_i181_2e_us_;
  __vec32_i32 v1_2e_i178_2e_lcssa_2e_us_;
  __vec32_i32 v1_2e_i178_2e_lcssa_2e_us___PHI;
  uint32_t new_counter77_2e_us_;
  __vec32_i1 oldMask_26_test_2e_i186_2e_us_;
  __vec32_i1 oldMask_26_test_2e_i186_2e_us___PHI;
  __vec32_i1 break_lanes_memory_2e_0_2e_i185_2e_us_;
  __vec32_i1 break_lanes_memory_2e_0_2e_i185_2e_us___PHI;
  __vec32_f z_im_2e_0_2e_i184_2e_us_;
  __vec32_f z_im_2e_0_2e_i184_2e_us___PHI;
  __vec32_f z_re_2e_0_2e_i183_2e_us_;
  __vec32_f z_re_2e_0_2e_i183_2e_us___PHI;
  __vec32_i32 v1_2e_i178182_2e_us_;
  __vec32_i32 v1_2e_i178182_2e_us___PHI;
  __vec32_f mul_z_re_load_z_re_load13_2e_i_2e_us_;
  __vec32_f mul_z_im_load_z_im_load14_2e_i_2e_us_;
  __vec32_i1 oldMask_26_test16_2e_i_2e_us_and_mask_;
  __vec32_i1 mask_7c_break_mask_2e_i_2e_us_;
  uint64_t finished_26_func_movmsk_2e_i_2e_us_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i_2e_us_;
  __vec32_i1 new_mask28_2e_i_2e_us210_;
  __vec32_f add_c_re_load42_new_re_load_2e_i_2e_us_;
  __vec32_f add_c_im_load44_new_im_load_2e_i_2e_us_;
  __vec32_f z_re_2e_1_2e_i_2e_us_;
  __vec32_f z_re_2e_1_2e_i_2e_us___PHI;
  __vec32_f z_im_2e_1_2e_i_2e_us_;
  __vec32_f z_im_2e_1_2e_i_2e_us___PHI;
  __vec32_i1 internal_mask_memory_2e_1_2e_i_2e_us_;
  __vec32_i1 internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  __vec32_i32 v1_2e_i_2e_us_;
  __vec32_i1 oldMask_26_test_2e_i_2e_us_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i_2e_us_;
  __vec32_i32 smear_counter206_2e_us_;
  __vec32_i32 smear_counter206_2e_us___PHI;
  uint32_t counter_2e_0204_2e_us_;
  uint32_t counter_2e_0204_2e_us___PHI;
  __vec32_f add_y0_load_broadcast_mul_yi_load_to_float_dy_load_broadcast_2e_us_;
  uint32_t mul_yi_load66_width_load67_broadcast_2e_elt0_2e_us_;
  __vec32_f z_re_2e_1_2e_i144_;
  __vec32_f z_re_2e_1_2e_i144___PHI;
  __vec32_f z_im_2e_1_2e_i145_;
  __vec32_f z_im_2e_1_2e_i145___PHI;
  __vec32_i1 internal_mask_memory_2e_1_2e_i146_;
  __vec32_i1 internal_mask_memory_2e_1_2e_i146___PHI;
  __vec32_i32 v1_2e_i176_;
  __vec32_i1 oldMask_26_test_2e_i141_and_mask_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i142_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i199_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i199___PHI;
  __vec32_i1 oldMask_26_test_2e_i141198_;
  __vec32_i1 oldMask_26_test_2e_i141198___PHI;
  __vec32_i1 break_lanes_memory_2e_0_2e_i137197_;
  __vec32_i1 break_lanes_memory_2e_0_2e_i137197___PHI;
  __vec32_f z_im_2e_0_2e_i136196_;
  __vec32_f z_im_2e_0_2e_i136196___PHI;
  __vec32_f z_re_2e_0_2e_i135195_;
  __vec32_f z_re_2e_0_2e_i135195___PHI;
  __vec32_i32 v1_2e_i176177194_;
  __vec32_i32 v1_2e_i176177194___PHI;
  __vec32_f mul_z_re_load_z_re_load13_2e_i150_;
  __vec32_f mul_z_im_load_z_im_load14_2e_i151_;
  __vec32_i1 oldMask_26_test16_2e_i154_and_mask_;
  __vec32_i1 mask_7c_break_mask_2e_i155_;
  __vec32_i1 finished_26_func_2e_i_and_mask_;
  uint64_t finished_26_func_movmsk_2e_i157_;
  uint64_t internal_mask_26_function_mask12_movmsk_2e_i158_;
  __vec32_i1 new_mask28_2e_i165212_;
  __vec32_f add_c_re_load42_new_re_load_2e_i171_;
  __vec32_f add_c_im_load44_new_im_load_2e_i172_;
  __vec32_i32 v1_2e_i176177_2e_lcssa_;
  __vec32_i32 v1_2e_i176177_2e_lcssa___PHI;
  uint64_t indvars_2e_iv_2e_next_;
  uint32_t tmp__2_;
  __vec32_i32 _smear_;
  uint64_t indvars_2e_iv_;
  uint64_t indvars_2e_iv___PHI;
  __vec32_i32 smear_counter206_;
  __vec32_i32 smear_counter206___PHI;
  __vec32_i32 mul_calltmp_xspan_load_smear_;
  __vec32_i32 iter_val82_;
  __vec32_i1 cmp85_;
  __vec32_f add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_;
  __vec32_f add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_;
  __vec32_i1 internal_mask_26_function_mask10_2e_i192_and_mask_;
  bool internal_mask_26_function_mask10_any_2e_i142193_;

  calltmp_2e_i_ = __blockIndex0();
  mul_calltmp_xspan_load_ = ((uint32_t )(((uint32_t )calltmp_2e_i_) * ((uint32_t )xspan_)));
  calltmp_2e_i131_ = __min_uniform_int32((((uint32_t )(((uint32_t )mul_calltmp_xspan_load_) + ((uint32_t )xspan_)))), width_);
  calltmp_2e_i132_ = __blockIndex1();
  mul_calltmp19_yspan_load_ = ((uint32_t )(((uint32_t )calltmp_2e_i132_) * ((uint32_t )yspan_)));
  calltmp_2e_i133_ = __min_uniform_int32((((uint32_t )(((uint32_t )mul_calltmp19_yspan_load_) + ((uint32_t )yspan_)))), height_);
  aligned_end35_ = ((uint32_t )(((uint32_t )calltmp_2e_i131_) - ((uint32_t )(((int32_t )(((int32_t )(((uint32_t )(((uint32_t )calltmp_2e_i131_) - ((uint32_t )mul_calltmp_xspan_load_))))) % ((int32_t )32u)))))));
  mul_calltmp19_yspan_load_smear_ = __smear_i32<__vec32_i32>(mul_calltmp19_yspan_load_);
  if ((((int32_t )mul_calltmp19_yspan_load_) < ((int32_t )calltmp_2e_i133_))) {
    goto outer_not_in_extras_2e_preheader_2e_lr_2e_ph_label;
  } else {
    goto foreach_reset_label;
  }

outer_not_in_extras_2e_preheader_2e_lr_2e_ph_label: {
  calltmp_2e_i131_smear_ = __smear_i32<__vec32_i32>(calltmp_2e_i131_);
  x0_smear_ = __smear_float<__vec32_f>(x0_);
  dx_smear_ = __smear_float<__vec32_f>(dx_);
  y0_smear_ = __smear_float<__vec32_f>(y0_);
  dy_smear_ = __smear_float<__vec32_f>(dy_);
  maxIterations_smear_ = __smear_i32<__vec32_i32>(maxIterations_);
  less_i_load_count_load_2e_i140190_ = __signed_greater_than_i32(maxIterations_smear_, __setzero_i32<__vec32_i32>());
  output_load110_ptr2int_2void_ = ((uint8_t *)output_);
  if ((((int32_t )mul_calltmp_xspan_load_) < ((int32_t )aligned_end35_))) {
    smear_counter206_2e_us___PHI = mul_calltmp19_yspan_load_smear_;   /* for PHI node */
    counter_2e_0204_2e_us___PHI = mul_calltmp19_yspan_load_;   /* for PHI node */
    goto foreach_full_body_2e_lr_2e_ph_2e_us_label;
  } else {
    goto outer_not_in_extras_2e_preheader_2e_lr_2e_ph_2e_outer_not_in_extras_2e_preheader_2e_lr_2e_ph_2e_split_crit_edge_label;
  }

}
outer_not_in_extras_2e_preheader_2e_lr_2e_ph_2e_outer_not_in_extras_2e_preheader_2e_lr_2e_ph_2e_split_crit_edge_label: {
  tmp__1_ = ((int64_t )(int32_t )mul_calltmp19_yspan_load_);
  indvars_2e_iv___PHI = tmp__1_;   /* for PHI node */
  smear_counter206___PHI = mul_calltmp19_yspan_load_smear_;   /* for PHI node */
  goto partial_inner_all_outer_label;

}
  do {     /* Syntactic loop 'foreach_full_body.lr.ph.us' to make GCC happy */
foreach_full_body_2e_lr_2e_ph_2e_us_label: {
  smear_counter206_2e_us_ = smear_counter206_2e_us___PHI;
  counter_2e_0204_2e_us_ = counter_2e_0204_2e_us___PHI;
  add_y0_load_broadcast_mul_yi_load_to_float_dy_load_broadcast_2e_us_ = __add(y0_smear_, (__mul(dy_smear_, ((__cast_sitofp(__vec32_f (), smear_counter206_2e_us_))))));
  mul_yi_load66_width_load67_broadcast_2e_elt0_2e_us_ = ((uint32_t )(((uint32_t )counter_2e_0204_2e_us_) * ((uint32_t )width_)));
  counter36_2e_3188_2e_us___PHI = mul_calltmp_xspan_load_;   /* for PHI node */
  goto foreach_full_body_2e_us_label;

}
  do {     /* Syntactic loop 'foreach_full_body.us' to make GCC happy */
foreach_full_body_2e_us_label: {
  counter36_2e_3188_2e_us_ = counter36_2e_3188_2e_us___PHI;
  counter36_2e_3188_2e_us_smear_ = __smear_i32<__vec32_i32>(counter36_2e_3188_2e_us_);
  add_x0_load_broadcast_mul_xi_load62_to_float_dx_load_broadcast_2e_us_ = __add(x0_smear_, (__mul(dx_smear_, ((__cast_sitofp(__vec32_f (), (__add(counter36_2e_3188_2e_us_smear_, __load<64>((const __vec32_i32  *)(VectorConstant2))))))))));
  internal_mask_26_function_mask10_any_2e_i181_2e_us_ = ((__any(less_i_load_count_load_2e_i140190_))&1);
  if (internal_mask_26_function_mask10_any_2e_i181_2e_us_) {
    oldMask_26_test_2e_i186_2e_us___PHI = less_i_load_count_load_2e_i140190_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i185_2e_us___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    z_im_2e_0_2e_i184_2e_us___PHI = add_y0_load_broadcast_mul_yi_load_to_float_dy_load_broadcast_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i183_2e_us___PHI = add_x0_load_broadcast_mul_xi_load62_to_float_dx_load_broadcast_2e_us_;   /* for PHI node */
    v1_2e_i178182_2e_us___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto for_loop_2e_i_2e_us_label;
  } else {
    v1_2e_i178_2e_lcssa_2e_us___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_2e_us_label;
  }

}
  do {     /* Syntactic loop 'for_loop.i.us' to make GCC happy */
for_loop_2e_i_2e_us_label: {
  oldMask_26_test_2e_i186_2e_us_ = oldMask_26_test_2e_i186_2e_us___PHI;
  break_lanes_memory_2e_0_2e_i185_2e_us_ = break_lanes_memory_2e_0_2e_i185_2e_us___PHI;
  z_im_2e_0_2e_i184_2e_us_ = z_im_2e_0_2e_i184_2e_us___PHI;
  z_re_2e_0_2e_i183_2e_us_ = z_re_2e_0_2e_i183_2e_us___PHI;
  v1_2e_i178182_2e_us_ = v1_2e_i178182_2e_us___PHI;
  mul_z_re_load_z_re_load13_2e_i_2e_us_ = __mul(z_re_2e_0_2e_i183_2e_us_, z_re_2e_0_2e_i183_2e_us_);
  mul_z_im_load_z_im_load14_2e_i_2e_us_ = __mul(z_im_2e_0_2e_i184_2e_us_, z_im_2e_0_2e_i184_2e_us_);
  oldMask_26_test16_2e_i_2e_us_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)), __smear_float<__vec32_f>(0x1p+2), oldMask_26_test_2e_i186_2e_us_);
  mask_7c_break_mask_2e_i_2e_us_ = __or(oldMask_26_test16_2e_i_2e_us_and_mask_, break_lanes_memory_2e_0_2e_i185_2e_us_);
  finished_26_func_movmsk_2e_i_2e_us_ = __movmsk(mask_7c_break_mask_2e_i_2e_us_);
  internal_mask_26_function_mask12_movmsk_2e_i_2e_us_ = __movmsk(oldMask_26_test_2e_i186_2e_us_);
  if ((finished_26_func_movmsk_2e_i_2e_us_ == internal_mask_26_function_mask12_movmsk_2e_i_2e_us_)) {
    z_re_2e_1_2e_i_2e_us___PHI = z_re_2e_0_2e_i183_2e_us_;   /* for PHI node */
    z_im_2e_1_2e_i_2e_us___PHI = z_im_2e_0_2e_i184_2e_us_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i_2e_us___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    goto for_step_2e_i_2e_us_label;
  } else {
    goto not_all_continued_or_breaked_2e_i_2e_us_label;
  }

}
not_all_continued_or_breaked_2e_i_2e_us_label: {
  new_mask28_2e_i_2e_us210_ = __and_not2(oldMask_26_test_2e_i186_2e_us_, mask_7c_break_mask_2e_i_2e_us_);
  add_c_re_load42_new_re_load_2e_i_2e_us_ = __add(add_x0_load_broadcast_mul_xi_load62_to_float_dx_load_broadcast_2e_us_, (__sub(mul_z_re_load_z_re_load13_2e_i_2e_us_, mul_z_im_load_z_im_load14_2e_i_2e_us_)));
  add_c_im_load44_new_im_load_2e_i_2e_us_ = __add(add_y0_load_broadcast_mul_yi_load_to_float_dy_load_broadcast_2e_us_, (__mul((__mul(z_re_2e_0_2e_i183_2e_us_, __smear_float<__vec32_f>(0x1p+1))), z_im_2e_0_2e_i184_2e_us_)));
  z_re_2e_1_2e_i_2e_us___PHI = add_c_re_load42_new_re_load_2e_i_2e_us_;   /* for PHI node */
  z_im_2e_1_2e_i_2e_us___PHI = add_c_im_load44_new_im_load_2e_i_2e_us_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i_2e_us___PHI = new_mask28_2e_i_2e_us210_;   /* for PHI node */
  goto for_step_2e_i_2e_us_label;

}
for_step_2e_i_2e_us_label: {
  z_re_2e_1_2e_i_2e_us_ = z_re_2e_1_2e_i_2e_us___PHI;
  z_im_2e_1_2e_i_2e_us_ = z_im_2e_1_2e_i_2e_us___PHI;
  internal_mask_memory_2e_1_2e_i_2e_us_ = internal_mask_memory_2e_1_2e_i_2e_us___PHI;
  v1_2e_i_2e_us_ = __select(internal_mask_memory_2e_1_2e_i_2e_us_, (__add(v1_2e_i178182_2e_us_, __smear_i32<__vec32_i32>(1u))), v1_2e_i178182_2e_us_);
  oldMask_26_test_2e_i_2e_us_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i_2e_us_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i_2e_us_);
  internal_mask_26_function_mask10_any_2e_i_2e_us_ = ((__any(oldMask_26_test_2e_i_2e_us_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i_2e_us_) {
    oldMask_26_test_2e_i186_2e_us___PHI = oldMask_26_test_2e_i_2e_us_and_mask_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i185_2e_us___PHI = mask_7c_break_mask_2e_i_2e_us_;   /* for PHI node */
    z_im_2e_0_2e_i184_2e_us___PHI = z_im_2e_1_2e_i_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i183_2e_us___PHI = z_re_2e_1_2e_i_2e_us_;   /* for PHI node */
    v1_2e_i178182_2e_us___PHI = v1_2e_i_2e_us_;   /* for PHI node */
    goto for_loop_2e_i_2e_us_label;
  } else {
    v1_2e_i178_2e_lcssa_2e_us___PHI = v1_2e_i_2e_us_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i.us' */
mandel___vyfvyfvyi_2e_exit_2e_us_label: {
  v1_2e_i178_2e_lcssa_2e_us_ = v1_2e_i178_2e_lcssa_2e_us___PHI;
  __store<4>((((__vec32_i32 (*))((&output_load110_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )counter36_2e_3188_2e_us_) + ((uint32_t )mul_yi_load66_width_load67_broadcast_2e_elt0_2e_us_)))) << 2u))))])))), v1_2e_i178_2e_lcssa_2e_us_);
  new_counter77_2e_us_ = ((uint32_t )(((uint32_t )counter36_2e_3188_2e_us_) + ((uint32_t )32u)));
  if ((((int32_t )new_counter77_2e_us_) < ((int32_t )aligned_end35_))) {
    counter36_2e_3188_2e_us___PHI = new_counter77_2e_us_;   /* for PHI node */
    goto foreach_full_body_2e_us_label;
  } else {
    goto partial_inner_all_outer_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body.us' */
partial_inner_all_outer_2e_us_label: {
  if ((((int32_t )new_counter77_2e_us_) < ((int32_t )calltmp_2e_i131_))) {
    goto partial_inner_only_2e_us_label;
  } else {
    goto foreach_reset30_2e_us_label;
  }

}
partial_inner_only_2e_us_label: {
  new_counter77_2e_us_smear_ = __smear_i32<__vec32_i32>(new_counter77_2e_us_);
  iter_val82_2e_us_ = __add(new_counter77_2e_us_smear_, __load<64>((const __vec32_i32  *)(VectorConstant2)));
  cmp85_2e_us_ = __signed_less_than_i32(iter_val82_2e_us_, calltmp_2e_i131_smear_);
  add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_2e_us_ = __add(x0_smear_, (__mul(dx_smear_, ((__cast_sitofp(__vec32_f (), iter_val82_2e_us_))))));
  add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_2e_us_ = __add(y0_smear_, (__mul(dy_smear_, ((__cast_sitofp(__vec32_f (), smear_counter206_2e_us_))))));
  internal_mask_26_function_mask10_2e_i192_2e_us_and_mask_ = __signed_greater_than_i32_and_mask(maxIterations_smear_, __setzero_i32<__vec32_i32>(), cmp85_2e_us_);
  internal_mask_26_function_mask10_any_2e_i142193_2e_us_ = ((__any(internal_mask_26_function_mask10_2e_i192_2e_us_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i142193_2e_us_) {
    internal_mask_26_function_mask10_2e_i199_2e_us___PHI = internal_mask_26_function_mask10_2e_i192_2e_us_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i141198_2e_us___PHI = less_i_load_count_load_2e_i140190_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i137197_2e_us___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    z_im_2e_0_2e_i136196_2e_us___PHI = add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i135195_2e_us___PHI = add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_2e_us_;   /* for PHI node */
    v1_2e_i176177194_2e_us___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto for_loop_2e_i160_2e_us_label;
  } else {
    v1_2e_i176177_2e_lcssa_2e_us___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit174_2e_us_label;
  }

}
  do {     /* Syntactic loop 'for_loop.i160.us' to make GCC happy */
for_loop_2e_i160_2e_us_label: {
  internal_mask_26_function_mask10_2e_i199_2e_us_ = internal_mask_26_function_mask10_2e_i199_2e_us___PHI;
  oldMask_26_test_2e_i141198_2e_us_ = oldMask_26_test_2e_i141198_2e_us___PHI;
  break_lanes_memory_2e_0_2e_i137197_2e_us_ = break_lanes_memory_2e_0_2e_i137197_2e_us___PHI;
  z_im_2e_0_2e_i136196_2e_us_ = z_im_2e_0_2e_i136196_2e_us___PHI;
  z_re_2e_0_2e_i135195_2e_us_ = z_re_2e_0_2e_i135195_2e_us___PHI;
  v1_2e_i176177194_2e_us_ = v1_2e_i176177194_2e_us___PHI;
  mul_z_re_load_z_re_load13_2e_i150_2e_us_ = __mul(z_re_2e_0_2e_i135195_2e_us_, z_re_2e_0_2e_i135195_2e_us_);
  mul_z_im_load_z_im_load14_2e_i151_2e_us_ = __mul(z_im_2e_0_2e_i136196_2e_us_, z_im_2e_0_2e_i136196_2e_us_);
  oldMask_26_test16_2e_i154_2e_us_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i150_2e_us_, mul_z_im_load_z_im_load14_2e_i151_2e_us_)), __smear_float<__vec32_f>(0x1p+2), oldMask_26_test_2e_i141198_2e_us_);
  mask_7c_break_mask_2e_i155_2e_us_ = __or(oldMask_26_test16_2e_i154_2e_us_and_mask_, break_lanes_memory_2e_0_2e_i137197_2e_us_);
  finished_26_func_2e_i_2e_us_and_mask_ = __signed_less_than_i32_and_mask(iter_val82_2e_us_, calltmp_2e_i131_smear_, mask_7c_break_mask_2e_i155_2e_us_);
  finished_26_func_movmsk_2e_i157_2e_us_ = __movmsk(finished_26_func_2e_i_2e_us_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i158_2e_us_ = __movmsk(internal_mask_26_function_mask10_2e_i199_2e_us_);
  if ((finished_26_func_movmsk_2e_i157_2e_us_ == internal_mask_26_function_mask12_movmsk_2e_i158_2e_us_)) {
    z_re_2e_1_2e_i144_2e_us___PHI = z_re_2e_0_2e_i135195_2e_us_;   /* for PHI node */
    z_im_2e_1_2e_i145_2e_us___PHI = z_im_2e_0_2e_i136196_2e_us_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i146_2e_us___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    goto for_step_2e_i149_2e_us_label;
  } else {
    goto not_all_continued_or_breaked_2e_i173_2e_us_label;
  }

}
not_all_continued_or_breaked_2e_i173_2e_us_label: {
  new_mask28_2e_i165_2e_us208_ = __and_not2(oldMask_26_test_2e_i141198_2e_us_, mask_7c_break_mask_2e_i155_2e_us_);
  add_c_re_load42_new_re_load_2e_i171_2e_us_ = __add(add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_2e_us_, (__sub(mul_z_re_load_z_re_load13_2e_i150_2e_us_, mul_z_im_load_z_im_load14_2e_i151_2e_us_)));
  add_c_im_load44_new_im_load_2e_i172_2e_us_ = __add(add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_2e_us_, (__mul((__mul(z_re_2e_0_2e_i135195_2e_us_, __smear_float<__vec32_f>(0x1p+1))), z_im_2e_0_2e_i136196_2e_us_)));
  z_re_2e_1_2e_i144_2e_us___PHI = add_c_re_load42_new_re_load_2e_i171_2e_us_;   /* for PHI node */
  z_im_2e_1_2e_i145_2e_us___PHI = add_c_im_load44_new_im_load_2e_i172_2e_us_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i146_2e_us___PHI = new_mask28_2e_i165_2e_us208_;   /* for PHI node */
  goto for_step_2e_i149_2e_us_label;

}
for_step_2e_i149_2e_us_label: {
  z_re_2e_1_2e_i144_2e_us_ = z_re_2e_1_2e_i144_2e_us___PHI;
  z_im_2e_1_2e_i145_2e_us_ = z_im_2e_1_2e_i145_2e_us___PHI;
  internal_mask_memory_2e_1_2e_i146_2e_us_ = internal_mask_memory_2e_1_2e_i146_2e_us___PHI;
  v1_2e_i176_2e_us_ = __select(internal_mask_memory_2e_1_2e_i146_2e_us_, (__add(v1_2e_i176177194_2e_us_, __smear_i32<__vec32_i32>(1u))), v1_2e_i176177194_2e_us_);
  oldMask_26_test_2e_i141_2e_us_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i176_2e_us_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i146_2e_us_);
  internal_mask_26_function_mask10_2e_i_2e_us_and_mask_ = __signed_less_than_i32_and_mask(iter_val82_2e_us_, calltmp_2e_i131_smear_, oldMask_26_test_2e_i141_2e_us_and_mask_);
  internal_mask_26_function_mask10_any_2e_i142_2e_us_ = ((__any(internal_mask_26_function_mask10_2e_i_2e_us_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i142_2e_us_) {
    internal_mask_26_function_mask10_2e_i199_2e_us___PHI = internal_mask_26_function_mask10_2e_i_2e_us_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i141198_2e_us___PHI = oldMask_26_test_2e_i141_2e_us_and_mask_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i137197_2e_us___PHI = mask_7c_break_mask_2e_i155_2e_us_;   /* for PHI node */
    z_im_2e_0_2e_i136196_2e_us___PHI = z_im_2e_1_2e_i145_2e_us_;   /* for PHI node */
    z_re_2e_0_2e_i135195_2e_us___PHI = z_re_2e_1_2e_i144_2e_us_;   /* for PHI node */
    v1_2e_i176177194_2e_us___PHI = v1_2e_i176_2e_us_;   /* for PHI node */
    goto for_loop_2e_i160_2e_us_label;
  } else {
    v1_2e_i176177_2e_lcssa_2e_us___PHI = v1_2e_i176_2e_us_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit174_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i160.us' */
mandel___vyfvyfvyi_2e_exit174_2e_us_label: {
  v1_2e_i176177_2e_lcssa_2e_us_ = v1_2e_i176177_2e_lcssa_2e_us___PHI;
  __masked_store_i32((((__vec32_i32 (*))((&output_load110_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )new_counter77_2e_us_) + ((uint32_t )(((uint32_t )(((uint32_t )counter_2e_0204_2e_us_) * ((uint32_t )width_)))))))) << 2u))))])))), v1_2e_i176177_2e_lcssa_2e_us_, cmp85_2e_us_);
  goto foreach_reset30_2e_us_label;

}
foreach_reset30_2e_us_label: {
  new_counter_2e_us_ = ((uint32_t )(((uint32_t )counter_2e_0204_2e_us_) + ((uint32_t )1u)));
  new_counter_2e_us_smear_ = __smear_i32<__vec32_i32>(new_counter_2e_us_);
  if ((new_counter_2e_us_ == calltmp_2e_i133_)) {
    goto foreach_reset_label;
  } else {
    smear_counter206_2e_us___PHI = new_counter_2e_us_smear_;   /* for PHI node */
    counter_2e_0204_2e_us___PHI = new_counter_2e_us_;   /* for PHI node */
    goto foreach_full_body_2e_lr_2e_ph_2e_us_label;
  }

}
  } while (1); /* end of syntactic loop 'foreach_full_body.lr.ph.us' */
foreach_reset_label: {
  return;
}
  do {     /* Syntactic loop 'partial_inner_all_outer' to make GCC happy */
partial_inner_all_outer_label: {
  indvars_2e_iv_ = indvars_2e_iv___PHI;
  smear_counter206_ = smear_counter206___PHI;
  if ((((int32_t )mul_calltmp_xspan_load_) < ((int32_t )calltmp_2e_i131_))) {
    goto partial_inner_only_label;
  } else {
    goto foreach_reset30_label;
  }

}
partial_inner_only_label: {
  mul_calltmp_xspan_load_smear_ = __smear_i32<__vec32_i32>(mul_calltmp_xspan_load_);
  iter_val82_ = __add(mul_calltmp_xspan_load_smear_, __load<64>((const __vec32_i32  *)(VectorConstant2)));
  cmp85_ = __signed_less_than_i32(iter_val82_, calltmp_2e_i131_smear_);
  add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_ = __add(x0_smear_, (__mul(dx_smear_, ((__cast_sitofp(__vec32_f (), iter_val82_))))));
  add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_ = __add(y0_smear_, (__mul(dy_smear_, ((__cast_sitofp(__vec32_f (), smear_counter206_))))));
  internal_mask_26_function_mask10_2e_i192_and_mask_ = __signed_greater_than_i32_and_mask(maxIterations_smear_, __setzero_i32<__vec32_i32>(), cmp85_);
  internal_mask_26_function_mask10_any_2e_i142193_ = ((__any(internal_mask_26_function_mask10_2e_i192_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i142193_) {
    internal_mask_26_function_mask10_2e_i199___PHI = internal_mask_26_function_mask10_2e_i192_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i141198___PHI = less_i_load_count_load_2e_i140190_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i137197___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    z_im_2e_0_2e_i136196___PHI = add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_;   /* for PHI node */
    z_re_2e_0_2e_i135195___PHI = add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_;   /* for PHI node */
    v1_2e_i176177194___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto for_loop_2e_i160_label;
  } else {
    v1_2e_i176177_2e_lcssa___PHI = __setzero_i32<__vec32_i32>();   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit174_label;
  }

}
  do {     /* Syntactic loop 'for_loop.i160' to make GCC happy */
for_loop_2e_i160_label: {
  internal_mask_26_function_mask10_2e_i199_ = internal_mask_26_function_mask10_2e_i199___PHI;
  oldMask_26_test_2e_i141198_ = oldMask_26_test_2e_i141198___PHI;
  break_lanes_memory_2e_0_2e_i137197_ = break_lanes_memory_2e_0_2e_i137197___PHI;
  z_im_2e_0_2e_i136196_ = z_im_2e_0_2e_i136196___PHI;
  z_re_2e_0_2e_i135195_ = z_re_2e_0_2e_i135195___PHI;
  v1_2e_i176177194_ = v1_2e_i176177194___PHI;
  mul_z_re_load_z_re_load13_2e_i150_ = __mul(z_re_2e_0_2e_i135195_, z_re_2e_0_2e_i135195_);
  mul_z_im_load_z_im_load14_2e_i151_ = __mul(z_im_2e_0_2e_i136196_, z_im_2e_0_2e_i136196_);
  oldMask_26_test16_2e_i154_and_mask_ = __greater_than_float_and_mask((__add(mul_z_re_load_z_re_load13_2e_i150_, mul_z_im_load_z_im_load14_2e_i151_)), __smear_float<__vec32_f>(0x1p+2), oldMask_26_test_2e_i141198_);
  mask_7c_break_mask_2e_i155_ = __or(oldMask_26_test16_2e_i154_and_mask_, break_lanes_memory_2e_0_2e_i137197_);
  finished_26_func_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val82_, calltmp_2e_i131_smear_, mask_7c_break_mask_2e_i155_);
  finished_26_func_movmsk_2e_i157_ = __movmsk(finished_26_func_2e_i_and_mask_);
  internal_mask_26_function_mask12_movmsk_2e_i158_ = __movmsk(internal_mask_26_function_mask10_2e_i199_);
  if ((finished_26_func_movmsk_2e_i157_ == internal_mask_26_function_mask12_movmsk_2e_i158_)) {
    z_re_2e_1_2e_i144___PHI = z_re_2e_0_2e_i135195_;   /* for PHI node */
    z_im_2e_1_2e_i145___PHI = z_im_2e_0_2e_i136196_;   /* for PHI node */
    internal_mask_memory_2e_1_2e_i146___PHI = __setzero_i1<__vec32_i1>();   /* for PHI node */
    goto for_step_2e_i149_label;
  } else {
    goto not_all_continued_or_breaked_2e_i173_label;
  }

}
not_all_continued_or_breaked_2e_i173_label: {
  new_mask28_2e_i165212_ = __and_not2(oldMask_26_test_2e_i141198_, mask_7c_break_mask_2e_i155_);
  add_c_re_load42_new_re_load_2e_i171_ = __add(add_x0_load91_broadcast_mul_xi_load92_to_float_dx_load93_broadcast_, (__sub(mul_z_re_load_z_re_load13_2e_i150_, mul_z_im_load_z_im_load14_2e_i151_)));
  add_c_im_load44_new_im_load_2e_i172_ = __add(add_y0_load95_broadcast_mul_yi_load96_to_float_dy_load97_broadcast_, (__mul((__mul(z_re_2e_0_2e_i135195_, __smear_float<__vec32_f>(0x1p+1))), z_im_2e_0_2e_i136196_)));
  z_re_2e_1_2e_i144___PHI = add_c_re_load42_new_re_load_2e_i171_;   /* for PHI node */
  z_im_2e_1_2e_i145___PHI = add_c_im_load44_new_im_load_2e_i172_;   /* for PHI node */
  internal_mask_memory_2e_1_2e_i146___PHI = new_mask28_2e_i165212_;   /* for PHI node */
  goto for_step_2e_i149_label;

}
for_step_2e_i149_label: {
  z_re_2e_1_2e_i144_ = z_re_2e_1_2e_i144___PHI;
  z_im_2e_1_2e_i145_ = z_im_2e_1_2e_i145___PHI;
  internal_mask_memory_2e_1_2e_i146_ = internal_mask_memory_2e_1_2e_i146___PHI;
  v1_2e_i176_ = __select(internal_mask_memory_2e_1_2e_i146_, (__add(v1_2e_i176177194_, __smear_i32<__vec32_i32>(1u))), v1_2e_i176177194_);
  oldMask_26_test_2e_i141_and_mask_ = __signed_less_than_i32_and_mask(v1_2e_i176_, maxIterations_smear_, internal_mask_memory_2e_1_2e_i146_);
  internal_mask_26_function_mask10_2e_i_and_mask_ = __signed_less_than_i32_and_mask(iter_val82_, calltmp_2e_i131_smear_, oldMask_26_test_2e_i141_and_mask_);
  internal_mask_26_function_mask10_any_2e_i142_ = ((__any(internal_mask_26_function_mask10_2e_i_and_mask_))&1);
  if (internal_mask_26_function_mask10_any_2e_i142_) {
    internal_mask_26_function_mask10_2e_i199___PHI = internal_mask_26_function_mask10_2e_i_and_mask_;   /* for PHI node */
    oldMask_26_test_2e_i141198___PHI = oldMask_26_test_2e_i141_and_mask_;   /* for PHI node */
    break_lanes_memory_2e_0_2e_i137197___PHI = mask_7c_break_mask_2e_i155_;   /* for PHI node */
    z_im_2e_0_2e_i136196___PHI = z_im_2e_1_2e_i145_;   /* for PHI node */
    z_re_2e_0_2e_i135195___PHI = z_re_2e_1_2e_i144_;   /* for PHI node */
    v1_2e_i176177194___PHI = v1_2e_i176_;   /* for PHI node */
    goto for_loop_2e_i160_label;
  } else {
    v1_2e_i176177_2e_lcssa___PHI = v1_2e_i176_;   /* for PHI node */
    goto mandel___vyfvyfvyi_2e_exit174_label;
  }

}
  } while (1); /* end of syntactic loop 'for_loop.i160' */
mandel___vyfvyfvyi_2e_exit174_label: {
  v1_2e_i176177_2e_lcssa_ = v1_2e_i176177_2e_lcssa___PHI;
  __masked_store_i32((((__vec32_i32 (*))((&output_load110_ptr2int_2void_[((int64_t )(((int64_t )(int32_t )((((uint32_t )(((uint32_t )mul_calltmp_xspan_load_) + ((uint32_t )(((uint32_t )(((uint32_t )(((uint32_t )indvars_2e_iv_))) * ((uint32_t )width_)))))))) << 2u))))])))), v1_2e_i176177_2e_lcssa_, cmp85_);
  goto foreach_reset30_label;

}
foreach_reset30_label: {
  indvars_2e_iv_2e_next_ = ((uint64_t )(((uint64_t )indvars_2e_iv_) + ((uint64_t )1ull)));
  tmp__2_ = ((uint32_t )indvars_2e_iv_2e_next_);
  _smear_ = __smear_i32<__vec32_i32>(tmp__2_);
  if ((((int32_t )tmp__2_) < ((int32_t )calltmp_2e_i133_))) {
    indvars_2e_iv___PHI = indvars_2e_iv_2e_next_;   /* for PHI node */
    smear_counter206___PHI = _smear_;   /* for PHI node */
    goto partial_inner_all_outer_label;
  } else {
    goto foreach_reset_label;
  }

}
  } while (1); /* end of syntactic loop 'partial_inner_all_outer' */
}



__global__ void mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_, __vec32_i1 __mask_) {
  uint8_t *launch_group_handle_;    /* Address-exposed local */
  uint32_t div_width_load13__;
  uint32_t div_height_load14_yspan_load_;
  uint8_t *args_ptr_;
  uint8_t *launch_group_handle_load_;

  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  div_width_load13__ = ((int32_t )(((int32_t )width_) / ((int32_t )64u)));
  div_height_load14_yspan_load_ = ((int32_t )(((int32_t )height_) / ((int32_t )8u)));
  args_ptr_ = ISPCAlloc((&launch_group_handle_), 8ull, 48ull);
  if ((args_ptr_ == ((uint8_t *)/*NULL*/0))) {
    goto if_false_label;
  } else {
    goto if_true_label;
  }

if_true_label: {
  *(((float *)args_ptr_)) = x0_;
  *(((float *)((&args_ptr_[((int64_t )4ull)])))) = (((float )((((float )(x1_ - x0_))) / (((float )(int32_t )width_)))));
  *(((float *)((&args_ptr_[((int64_t )8ull)])))) = y0_;
  *(((float *)((&args_ptr_[((int64_t )12ull)])))) = (((float )((((float )(y1_ - y0_))) / (((float )(int32_t )height_)))));
  *(((uint32_t *)((&args_ptr_[((int64_t )16ull)])))) = width_;
  *(((uint32_t *)((&args_ptr_[((int64_t )20ull)])))) = height_;
  *(((uint32_t *)((&args_ptr_[((int64_t )24ull)])))) = 64u;
  *(((uint32_t *)((&args_ptr_[((int64_t )28ull)])))) = 8u;
  *(((uint32_t *)((&args_ptr_[((int64_t )32ull)])))) = maxIterations_;
  *(((uint32_t **)((&args_ptr_[((int64_t )40ull)])))) = output_;
  goto if_false_label;

}
if_false_label: {
  ISPCLaunch((&launch_group_handle_), ((uint8_t *)mandelbrot_scanline___unfunfunfunfuniuniuniuniuniun_3C_uni_3E_), args_ptr_, div_width_load13__, div_height_load14_yspan_load_, 1u);
  launch_group_handle_load_ = *(&launch_group_handle_);
  if ((launch_group_handle_load_ == ((uint8_t *)/*NULL*/0))) {
    goto post_sync27_label;
  } else {
    goto call_sync_label;
  }

}
call_sync_label: {
  ISPCSync(launch_group_handle_load_);
  *(&launch_group_handle_) = ((uint8_t *)/*NULL*/0);
  goto post_sync27_label;

}
post_sync27_label: {
  return;
}
}



void mandelbrot_ispc(float x0_, float y0_, float x1_, float y1_, uint32_t width_, uint32_t height_, uint32_t maxIterations_, uint32_t *output_) 
{
  mandelbrot_ispc___unfunfunfunfuniuniuniun_3C_uni_3E_<<<1,32>>>(x0_, y0_, x1_, y1_, width_, height_, maxIterations_, output_, true);
  cudaDeviceSynchronize();
}

